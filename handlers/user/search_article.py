import asyncio
from datetime import datetime, timedelta
from config import session
from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from context.set_article import SetArticle
from service.wb import search_article_from_wb
from buttons.user.main import main_markup, subscribe, CallbackDataSubscribe
from data.models import User

router = Router()


@router.message(F.text == 'üëâ –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Ç–æ–≤–∞—Ä—É')
async def search_article(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞", reply_markup=types.ReplyKeyboardRemove())

    await state.set_state(SetArticle.article)


@router.message(SetArticle.article)
async def get_article(message: types.Message, state: FSMContext):
    await message.answer("–ò–¥–µ—Ç –ø–æ–∏—Å–∫...")

    data = await search_article_from_wb(message.text)

    if data:

        try:
            data_from_db = session.query(User).filter(User.article_id == message.text).first()

            if data_from_db:

                pass

            else:

                user = User(
                    user_id=message.from_user.id,
                    time_request=datetime.now().time(),
                    article_id=message.text
                )

                session.add(user)
                session.commit()

        except Exception as e:

            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö! {e}\n"
                                 f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ", reply_markup=main_markup())
            await state.clear()

        await message.answer("–ù–∞–π–¥–µ–Ω–æ!")

        await asyncio.sleep(1)

        await message.answer(f"<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ:</b>\n"
                             f"\n"
                             f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {data['data']['products'][0]['name']}\n"
                             f"<b>–ê—Ä—Ç–∏–∫—É–ª:</b> {data['data']['products'][0]['id']}\n"
                             f"<b>–¶–µ–Ω–∞:</b> {data['data']['products'][0]['priceU']/ 100:.2f} RUB\n"
                             f"<b>–¶–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π:</b> {data['data']['products'][0]['salePriceU']/ 100:.2f} RUB\n"
                             f"<b>–†–µ–π—Ç–∏–Ω–≥ —Ç–æ–≤–∞—Ä–∞:</b> {data['data']['products'][0]['reviewRating']}\n"
                             f"<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ –≤—Å–µ—Ö —Å–∫–ª–∞–¥–∞—Ö:</b> {sum(stock['qty'] for stock in data['data']['products'][0]['sizes'][0]['stocks'])}",
                             parse_mode='HTML', reply_markup=subscribe(data['data']['products'][0]['id']))
        await state.clear()

    else:

        await message.answer("–ü–æ –¥–∞–Ω–Ω–æ–º—É –∞—Ä—Ç–∏–∫–ª—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", reply_markup=main_markup())

        await state.clear()


@router.callback_query(CallbackDataSubscribe.filter())
async def start_subscribe(call: types.CallbackQuery, callback_data: CallbackDataSubscribe):

    user = session.query(User).filter(User.article_id == str(callback_data.action)).first()

    current_time = datetime.now()

    time_delta = current_time + timedelta(minutes=5)

    user.next_message = time_delta.time()
    session.commit()

    await call.message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è!", reply_markup=main_markup())
