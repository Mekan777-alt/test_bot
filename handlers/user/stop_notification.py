from aiogram import types, Router, F
from aiogram.fsm.context import FSMContext
from context.set_article import UnSubscribe
from config import redis_client
from buttons.user.main import main_markup, CallbackDataUnsubscribe, create_unsubscribe_markup
from service.get_data_from_redis import get_data_from_redis

router = Router()


@router.message(F.text == 'üëâ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')
async def stop_notification(message: types.Message, state: FSMContext):
    try:
        data = await get_data_from_redis(message.from_user.id)

        if data:

            await message.answer(f"–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:",
                                 reply_markup=await create_unsubscribe_markup(data))
            await state.set_state(UnSubscribe.article)

        else:

            await message.answer("–í—ã –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", reply_markup=main_markup())

    except Exception:

        await message.answer("–û—à–∏–±–∫–∞!, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–¥–Ω–µ–µ", reply_markup=main_markup())


@router.callback_query(CallbackDataUnsubscribe.filter(), UnSubscribe.article)
async def set_unsubscribe(call: types.CallbackQuery, state: FSMContext, callback_data: CallbackDataUnsubscribe):
    article_id = str(callback_data.action)

    redis_key = f"subscription:{article_id}"
    redis_client.delete(redis_key)

    await call.message.answer(f"–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É {callback_data.data}",
                              reply_markup=main_markup())
    await state.clear()
